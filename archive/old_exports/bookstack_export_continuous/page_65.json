{
  "id": 65,
  "title": "Telegram Tool for Asynchronous Communication",
  "slug": "telegram-tool-for-asynchronous-communication",
  "url": "https://knowledge.oculair.ca/books/unknown/page/telegram-tool-for-asynchronous-communication",
  "updated_at": "2025-02-23T04:28:37.000000Z",
  "body_html": "<p id=\"bkmrk-development-of-a-new\">Development of a new Telegram tool for Letta to enable asynchronous communication and notifications.</p>\r\n<p id=\"bkmrk-note%3A-this-is-distin\"><strong>Note:</strong> This is distinct from the existing user-initiated Telegram integration.</p>\r\n<p id=\"bkmrk-2025-02-22-implement\">2025-02-22 implemented and tested\u00a0</p>\r\n<pre id=\"bkmrk-import-requests-impo\"><code class=\"language-\">import requests\r\nimport json\r\nimport logging\r\nfrom typing import Dict, Optional\r\n\r\n# Hardcoded credentials\r\nBOT_TOKEN = \"7769063652:AAENI9qioDruRQXjSm24YHP6vHRqJovRzYk\"\r\nCHAT_ID = \"7771357689\"\r\nAPI_BASE = f\"https://api.telegram.org/bot{BOT_TOKEN}\"\r\n\r\ndef setup_logging(debug_level: str = \"INFO\") -&gt; None:\r\n    \"\"\"Configure logging with standard format.\"\"\"\r\n    numeric_level = getattr(logging, debug_level.upper(), logging.INFO)\r\n    logging.basicConfig(\r\n        level=numeric_level,\r\n        format='%(asctime)s - %(levelname)s - %(message)s',\r\n        force=True\r\n    )\r\n\r\ndef send_telegram_message(\r\n    message: str,\r\n    debug_level: str = \"INFO\"\r\n) -&gt; Dict[str, Optional[str]]:\r\n    \"\"\"\r\n    Sends a message to a specified Telegram chat using the Telegram Bot API.\r\n\r\n    Args:\r\n        message: The text message to send.\r\n        debug_level: Logging verbosity (\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"). Default: \"INFO\".\r\n\r\n    Returns:\r\n        Dictionary with standard response format containing:\r\n        - success: \"true\" or \"false\"\r\n        - response: Message response data if successful, None if failed\r\n        - error: Error message if failed, None if successful\r\n        - metadata: Additional information about the request\r\n    \"\"\"\r\n    setup_logging(debug_level)\r\n\r\n    try:\r\n        # Prepare request payload\r\n        url = f\"{API_BASE}/sendMessage\"\r\n        payload = {\r\n            \"chat_id\": CHAT_ID,\r\n            \"text\": message\r\n        }\r\n        headers = {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n\r\n        # Make request to Telegram API\r\n        response = requests.post(\r\n            url,\r\n            json=payload,\r\n            headers=headers\r\n        )\r\n        response.raise_for_status()\r\n        result = response.json()\r\n\r\n        logging.debug(f\"API Response: {json.dumps(result, indent=2)}\")\r\n\r\n        if result.get(\"ok\"):\r\n            return {\r\n                \"success\": \"true\",\r\n                \"response\": result[\"result\"],\r\n                \"error\": None,\r\n                \"metadata\": json.dumps({\r\n                    \"status_code\": str(response.status_code),\r\n                    \"success\": \"true\",\r\n                    \"message_id\": str(result[\"result\"].get(\"message_id\")),\r\n                    \"chat_id\": CHAT_ID\r\n                })\r\n            }\r\n        \r\n        return {\r\n            \"success\": \"false\",\r\n            \"response\": None,\r\n            \"error\": \"Message not sent successfully\",\r\n            \"metadata\": json.dumps({\r\n                \"status_code\": str(response.status_code),\r\n                \"success\": \"false\",\r\n                \"error_code\": result.get(\"error_code\"),\r\n                \"description\": result.get(\"description\")\r\n            })\r\n        }\r\n\r\n    except requests.exceptions.RequestException as e:\r\n        error_msg = f\"Request failed: {type(e).__name__}: {str(e)}\"\r\n        logging.error(error_msg)\r\n        return {\r\n            \"success\": \"false\",\r\n            \"response\": None,\r\n            \"error\": error_msg,\r\n            \"metadata\": None\r\n        }\r\n    except Exception as e:\r\n        error_msg = f\"An unexpected error occurred: {type(e).__name__}: {str(e)}\"\r\n        logging.error(error_msg)\r\n        return {\r\n            \"success\": \"false\",\r\n            \"response\": None,\r\n            \"error\": error_msg,\r\n            \"metadata\": None\r\n        }\r\n\r\nif __name__ == \"__main__\":\r\n    # Test the tool with a sample message\r\n    result = send_telegram_message(\r\n        message=\"Test message from improved Telegram tool\",\r\n        debug_level=\"DEBUG\"\r\n    )\r\n    print(json.dumps(result, indent=2))</code></pre>\r\n<p id=\"bkmrk-\"></p>",
  "tags": [],
  "book": "Letta Integration and Expansion Ideas",
  "chapter": ""
}