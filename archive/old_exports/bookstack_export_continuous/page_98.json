{
  "id": 98,
  "title": "LettaSearch MCP Tool Documentation",
  "slug": "lettasearch-mcp-tool-documentation",
  "url": "https://knowledge.oculair.ca/books/unknown/page/lettasearch-mcp-tool-documentation",
  "updated_at": "2025-04-20T20:37:24.000000Z",
  "body_html": "<h1 id=\"bkmrk-lettasearch-mcp-tool\">LettaSearch MCP Tool Documentation</h1>\n<h2 id=\"bkmrk-overview\">Overview</h2>\n<p id=\"bkmrk-the-lettasearch-mcp-\">The LettaSearch MCP Tool is a system designed to enhance Letta agents with dynamic tool management capabilities. It allows agents to search for, attach, and detach tools based on natural language queries, making them more versatile and capable of handling a wider range of tasks.</p>\n<p id=\"bkmrk-the-system-consists-\">The system consists of several components that work together to provide seamless tool management:</p>\n<ol id=\"bkmrk-api-server%3A-a-flask-\">\n<li><strong>API Server</strong>: A Flask-based server that handles requests for tool search and attachment</li>\n<li><strong>Weaviate Integration</strong>: Vector database for semantic search of tools</li>\n<li><strong>MCP Tool Management</strong>: Handles registration and management of MCP (Model Context Protocol) tools</li>\n<li><strong>Docker Containerization</strong>: Ensures consistent deployment across environments</li>\n</ol>\n<h2 id=\"bkmrk-system-architecture\">System Architecture</h2>\n<pre id=\"bkmrk-%E2%94%8C%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%80%E2%94%90-\"><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 \u2502     \u2502                 \u2502     \u2502                 \u2502\n\u2502   Letta Agent   \u2502\u25c4\u2500\u2500\u2500\u2500\u2524  LettaSearch    \u2502\u25c4\u2500\u2500\u2500\u2500\u2524    Weaviate     \u2502\n\u2502                 \u2502     \u2502   MCP Tool      \u2502     \u2502  Vector Search  \u2502\n\u2502                 \u2502     \u2502                 \u2502     \u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u25b2\n                               \u2502\n                               \u25bc\n                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                        \u2502                 \u2502\n                        \u2502   MCP Servers   \u2502\n                        \u2502                 \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n<h2 id=\"bkmrk-components\">Components</h2>\n<h3 id=\"bkmrk-api-server-%28api_serv\">API Server (<code>api_server.py</code>)</h3>\n<p id=\"bkmrk-the-core-of-the-syst\">The core of the system, handling HTTP requests for:</p>\n<ul id=\"bkmrk-tool-search-tool-att\">\n<li>Tool search</li>\n<li>Tool attachment/detachment</li>\n<li>Tool synchronization</li>\n</ul>\n<p id=\"bkmrk-the-server-provides-\">The server provides endpoints that allow agents to find and attach tools based on natural language queries, automatically managing the lifecycle of tools attached to an agent.</p>\n<h3 id=\"bkmrk-weaviate-tool-search\">Weaviate Tool Search (<code>weaviate_tool_search.py</code>)</h3>\n<p id=\"bkmrk-provides-semantic-se\">Provides semantic search capabilities using the Weaviate vector database:</p>\n<ul id=\"bkmrk-performs-hybrid-sear\">\n<li>Performs hybrid search (vector + keyword)</li>\n<li>Expands queries with synonyms for better matching</li>\n<li>Returns ranked results with relevance scores</li>\n</ul>\n<h3 id=\"bkmrk-tool-management-scri\">Tool Management Scripts</h3>\n<ul id=\"bkmrk-find_attach_tools_v3\">\n<li><code>find_attach_tools_v3.py</code>: Client script for finding and attaching tools</li>\n<li><code>upload_tools_to_weaviate.py</code>: Synchronizes tools with Weaviate</li>\n<li><code>detach_mcp_tools.py</code>: Handles detachment of MCP tools</li>\n</ul>\n<h2 id=\"bkmrk-docker-setup\">Docker Setup</h2>\n<p id=\"bkmrk-the-system-is-contai\">The system is containerized using Docker for easy deployment and scaling.</p>\n<h3 id=\"bkmrk-dockerfile\">Dockerfile</h3>\n<pre id=\"bkmrk-from-python%3A3.11-sli\"><code class=\"language-dockerfile\">FROM python:3.11-slim\n\nWORKDIR /app\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    python3-dev \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY *.py .\nCOPY *.json .\n\nENV WEAVIATE_URL=${WEAVIATE_URL}\nENV WEAVIATE_API_KEY=${WEAVIATE_API_KEY}\nENV OPENAI_API_KEY=${OPENAI_API_KEY}\n\nEXPOSE 3001\n\nCMD [\"python\", \"api_server.py\"]\n</code></pre>\n<h3 id=\"bkmrk-docker-compose\">Docker Compose</h3>\n<p id=\"bkmrk-the-docker-compose.y\">The <code>docker-compose.yml</code> file defines the services:</p>\n<pre id=\"bkmrk-services%3A-weaviate%3A-\"><code class=\"language-yaml\">services:\n  weaviate:\n    image: semitechnologies/weaviate:1.24.0\n    ports:\n      - \"8080:8080\"\n    environment:\n      QUERY_DEFAULTS_LIMIT: 25\n      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: \"true\"\n      PERSISTENCE_DATA_PATH: \"/var/lib/weaviate\"\n      DEFAULT_VECTORIZER_MODULE: \"text2vec-openai\"\n      ENABLE_MODULES: \"text2vec-openai\"\n      OPENAI_APIKEY: ${OPENAI_API_KEY}\n      CLUSTER_HOSTNAME: \"node1\"\n      READINESS_MAX_WAIT_SECS: 300\n    volumes:\n      - weaviate_data:/var/lib/weaviate\n    networks:\n      - letta-tools\n\n  api-server:\n    build: .\n    image: oculair/lettaaugment:latest\n    container_name: weaviate-tools-api\n    ports:\n      - \"8020:3001\"\n    environment:\n      - WEAVIATE_URL=${WEAVIATE_URL}\n      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - PORT=3001\n    restart: unless-stopped\n    volumes:\n      - ./.env:/app/.env:ro\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3001/api/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 10s\n    networks:\n      - letta-tools\n\n  sync-service:\n    build: .\n    image: oculair/lettaaugment:latest\n    container_name: weaviate-tools-sync\n    command: python sync_service.py\n    environment:\n      - WEAVIATE_URL=${WEAVIATE_URL}\n      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - API_URL=http://api-server:3001\n      - SYNC_INTERVAL=300\n    volumes:\n      - ./.env:/app/.env:ro\n    restart: unless-stopped\n    depends_on:\n      api-server:\n        condition: service_healthy\n    networks:\n      - letta-tools\n\n  time-service:\n    build: .\n    image: oculair/lettaaugment:latest\n    container_name: weaviate-tools-time\n    command: python time_memory_service.py\n    environment:\n      - WEAVIATE_URL=${WEAVIATE_URL}\n      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - LETTA_API_URL=https://letta2.oculair.ca/v1\n      - UPDATE_INTERVAL=60\n    volumes:\n      - ./.env:/app/.env:ro\n    restart: unless-stopped\n    networks:\n      - letta-tools\n\nnetworks:\n  letta-tools:\n    driver: bridge\n\nvolumes:\n  weaviate_data:\n</code></pre>\n<h2 id=\"bkmrk-api-endpoints\">API Endpoints</h2>\n<h3 id=\"bkmrk-1.-%2Fapi%2Fv1%2Ftools%2Fsea\">1. <code>/api/v1/tools/search</code> (POST)</h3>\n<p id=\"bkmrk-search-for-tools-bas\">Search for tools based on a query.</p>\n<p id=\"bkmrk-request%3A\"><strong>Request:</strong></p>\n<pre id=\"bkmrk-%7B-%22query%22%3A-%22github-r\"><code class=\"language-json\">{\n  \"query\": \"github repository\",\n  \"limit\": 10\n}\n</code></pre>\n<p id=\"bkmrk-response%3A\"><strong>Response:</strong></p>\n<pre id=\"bkmrk-%5B-%7B-%22name%22%3A-%22github-\"><code class=\"language-json\">[\n  {\n    \"name\": \"github-mcp-server__create_repository\",\n    \"description\": \"Create a new GitHub repository\",\n    \"distance\": 0.15,\n    \"tags\": [\"github\", \"repository\", \"create\"]\n  },\n  ...\n]\n</code></pre>\n<h3 id=\"bkmrk-2.-%2Fapi%2Fv1%2Ftools%2Fatt\">2. <code>/api/v1/tools/attach</code> (POST)</h3>\n<p id=\"bkmrk-find-and-attach-tool\">Find and attach tools to an agent.</p>\n<p id=\"bkmrk-request%3A-1\"><strong>Request:</strong></p>\n<pre id=\"bkmrk-%7B-%22query%22%3A-%22github-r-1\"><code class=\"language-json\">{\n  \"query\": \"github repository\",\n  \"agent_id\": \"agent-33718e73-f85a-4cfd-a42b-d0a6feeaf5a5\",\n  \"limit\": 2,\n  \"keep_tools\": []\n}\n</code></pre>\n<p id=\"bkmrk-response%3A-1\"><strong>Response:</strong></p>\n<pre id=\"bkmrk-%7B-%22success%22%3A-true%2C-%22\"><code class=\"language-json\">{\n  \"success\": true,\n  \"message\": \"Successfully processed 2 candidates, attached 2 tool(s) to agent agent-33718e73-f85a-4cfd-a42b-d0a6feeaf5a5\",\n  \"details\": {\n    \"detached_tools\": [\"tool-d9c0e4d1-13f5-46b2-acb7-963771693185\", \"tool-95decb78-5c96-4229-b262-a7757382dcdf\"],\n    \"failed_detachments\": [],\n    \"processed_count\": 2,\n    \"passed_filter_count\": 2,\n    \"success_count\": 2,\n    \"failure_count\": 0,\n    \"successful_attachments\": [...],\n    \"failed_attachments\": [],\n    \"preserved_tools\": [],\n    \"target_agent\": \"agent-33718e73-f85a-4cfd-a42b-d0a6feeaf5a5\"\n  }\n}\n</code></pre>\n<h3 id=\"bkmrk-3.-%2Fapi%2Fv1%2Ftools%2Fsyn\">3. <code>/api/v1/tools/sync</code> (POST)</h3>\n<p id=\"bkmrk-synchronize-tools-wi\">Synchronize tools with Weaviate.</p>\n<p id=\"bkmrk-response%3A-2\"><strong>Response:</strong></p>\n<pre id=\"bkmrk-%7B-%22success%22%3A-true%2C-%22-1\"><code class=\"language-json\">{\n  \"success\": true,\n  \"message\": \"Tool synchronization completed\",\n  \"details\": {\n    \"uploaded\": 0,\n    \"skipped\": 0,\n    \"failed\": 0\n  }\n}\n</code></pre>\n<h3 id=\"bkmrk-4.-%2Fapi%2Fhealth-%28get%29\">4. <code>/api/health</code> (GET)</h3>\n<p id=\"bkmrk-health-check-endpoin\">Health check endpoint.</p>\n<p id=\"bkmrk-response%3A-3\"><strong>Response:</strong></p>\n<pre id=\"bkmrk-%7B-%22status%22%3A-%22healthy\"><code class=\"language-json\">{\n  \"status\": \"healthy\"\n}\n</code></pre>\n<h2 id=\"bkmrk-tool-detachment-proc\">Tool Detachment Process</h2>\n<p id=\"bkmrk-the-system-manages-t\">The system manages tool detachment to ensure that agents don't have too many tools attached at once, which could cause context window issues.</p>\n<h3 id=\"bkmrk-how-tool-detachment-\">How Tool Detachment Works:</h3>\n<ol id=\"bkmrk-when-new-tools-are-a\">\n<li>When new tools are attached, the system identifies existing MCP tools that need to be detached</li>\n<li>Tools specified in the <code>keep_tools</code> list are preserved</li>\n<li>Detachment is performed sequentially with retry logic for reliability</li>\n<li>The system logs detailed information about the detachment process</li>\n</ol>\n<h3 id=\"bkmrk-recent-fix%3A-variable\">Recent Fix: Variable Name Conflict</h3>\n<p id=\"bkmrk-a-critical-issue-was\">A critical issue was fixed where a variable name conflict was causing tool detachment to fail:</p>\n<pre id=\"bkmrk-%23-before-%28problemati\"><code class=\"language-python\"># Before (problematic code)\nmcp_tools_response = requests.get(f\"{LETTA_URL}/tools/mcp/servers/{server_name}/tools\", headers=HEADERS)\nmcp_tools_response.raise_for_status()\nmcp_tools = mcp_tools_response.json()  # This was overwriting the mcp_tools list!\n\n# After (fixed code)\nmcp_tools_response = requests.get(f\"{LETTA_URL}/tools/mcp/servers/{server_name}/tools\", headers=HEADERS)\nmcp_tools_response.raise_for_status()\nserver_mcp_tools = mcp_tools_response.json()  # Renamed to avoid conflict\n</code></pre>\n<p id=\"bkmrk-this-fix-ensures-tha\">This fix ensures that the list of MCP tools from the agent is not overwritten during the tool registration process, allowing proper identification of tools that need to be detached.</p>\n<h2 id=\"bkmrk-deployment\">Deployment</h2>\n<h3 id=\"bkmrk-building-and-pushing\">Building and Pushing the Docker Image</h3>\n<pre id=\"bkmrk-docker-build--t-ocul\"><code class=\"language-bash\">docker build -t oculair/lettaaugment:latest .\ndocker push oculair/lettaaugment:latest\n</code></pre>\n<h3 id=\"bkmrk-running-the-containe\">Running the Container</h3>\n<pre id=\"bkmrk-%23-for-just-the-api-s\"><code class=\"language-bash\"># For just the API server\ndocker run -d -p 8020:3001 --env-file .env --name lettaaugment-prod oculair/lettaaugment:latest\n\n# For the complete setup with all services\ndocker-compose up -d\n</code></pre>\n<h3 id=\"bkmrk-managing-the-contain\">Managing the Container</h3>\n<pre id=\"bkmrk-%23-stop-the-container\"><code class=\"language-bash\"># Stop the container\ndocker stop lettaaugment-prod\n\n# Remove the container\ndocker rm lettaaugment-prod\n\n# View logs\ndocker logs lettaaugment-prod\n\n# Restart the container\ndocker restart lettaaugment-prod\n</code></pre>\n<h2 id=\"bkmrk-troubleshooting\">Troubleshooting</h2>\n<h3 id=\"bkmrk-common-issues\">Common Issues</h3>\n<ol id=\"bkmrk-tool-detachment-fail\">\n<li>\n<p><strong>Tool Detachment Failures</strong></p>\n<ul>\n<li>Check if the Letta API is accessible</li>\n<li>Verify that the agent ID is correct</li>\n<li>Look for error messages in the logs</li>\n</ul>\n</li>\n<li>\n<p><strong>Search Returns No Results</strong></p>\n<ul>\n<li>Ensure Weaviate is properly configured</li>\n<li>Check if tools have been synchronized with Weaviate</li>\n<li>Try broadening your search query</li>\n</ul>\n</li>\n<li>\n<p><strong>Docker Container Crashes</strong></p>\n<ul>\n<li>Check environment variables</li>\n<li>Verify network connectivity to Weaviate and Letta API</li>\n<li>Inspect logs for error messages</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"bkmrk-debugging\">Debugging</h3>\n<p id=\"bkmrk-for-detailed-debuggi\">For detailed debugging, use:</p>\n<pre id=\"bkmrk-docker-logs-lettaaug\"><code class=\"language-bash\">docker logs lettaaugment-prod\n</code></pre>\n<h2 id=\"bkmrk-client-usage\">Client Usage</h2>\n<p id=\"bkmrk-the-find_attach_tool\">The <code>find_attach_tools_v3.py</code> script can be used as a client to interact with the API:</p>\n<pre id=\"bkmrk-python-find_attach_t\"><code class=\"language-bash\">python find_attach_tools_v3.py --query \"github repository\" --agent_id \"agent-33718e73-f85a-4cfd-a42b-d0a6feeaf5a5\" --limit 5\n</code></pre>\n<h2 id=\"bkmrk-conclusion\">Conclusion</h2>\n<p id=\"bkmrk-the-lettasearch-mcp--1\">The LettaSearch MCP Tool provides a powerful way to enhance Letta agents with dynamic tool management. By leveraging semantic search and automated tool lifecycle management, it enables agents to adapt to different tasks and user needs.</p>\n<p id=\"bkmrk-the-system-is-design\">The system is designed to be reliable, with features like sequential detachment with retry logic, and efficient, using hybrid search to find the most relevant tools for a given query.</p>\n",
  "tags": [],
  "book": "Dynamic Tool Loading for Letta",
  "chapter": ""
}