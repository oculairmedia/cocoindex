{
  "id": 115,
  "title": "Docker Containerization Guide",
  "slug": "docker-containerization-guide",
  "url": "https://knowledge.oculair.ca/books/unknown/page/docker-containerization-guide",
  "updated_at": "2025-05-06T16:25:46.000000Z",
  "body_html": "<h1 id=\"bkmrk-docker-containerizat\">Docker Containerization Guide</h1>\n<h2 id=\"bkmrk-overview\">Overview</h2>\n<p id=\"bkmrk-the-bookstack-graphi\">The BookStack-Graphiti integration includes Docker support for easy deployment and containerization. This approach simplifies the setup process, ensures consistent environments, and makes the integration more portable across different systems.</p>\n<h2 id=\"bkmrk-docker-components\">Docker Components</h2>\n<p id=\"bkmrk-the-containerization\">The containerization setup consists of two main files:</p>\n<ol id=\"bkmrk-dockerfile%3A-defines-\">\n<li><strong>Dockerfile</strong>: Defines the container image for the integration</li>\n<li><strong>docker-compose.yml</strong>: Orchestrates the container deployment and configuration</li>\n</ol>\n<h2 id=\"bkmrk-dockerfile-details\">Dockerfile Details</h2>\n<p id=\"bkmrk-the-dockerfile-uses-\">The Dockerfile uses a multi-stage build process to create a lightweight and efficient container:</p>\n<pre id=\"bkmrk-%23-use-an-official-py\"><code class=\"language-dockerfile\"># Use an official Python runtime as a parent image\nFROM python:3.10-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the requirements file into the container at /app\nCOPY requirements.txt .\n\n# Install any needed packages specified in requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the rest of the application code into the container at /app\nCOPY . .\n\n# Make port 8003 available to the world outside this container\nEXPOSE 8003\n\n# Define environment variable\nENV NAME World\n\n# Run webhook_receiver.py when the container launches\nCMD [\"uvicorn\", \"webhook_receiver:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8003\"]\n</code></pre>\n<p id=\"bkmrk-this-dockerfile%3A\">This Dockerfile:</p>\n<ol id=\"bkmrk-uses-python-3.10-sli\">\n<li>Uses Python 3.10-slim as the base image for a smaller footprint</li>\n<li>Sets up the working directory in the container</li>\n<li>Installs the required dependencies</li>\n<li>Copies the application code into the container</li>\n<li>Exposes port 8003 for the webhook receiver</li>\n<li>Sets the default command to run the webhook receiver</li>\n</ol>\n<h2 id=\"bkmrk-docker-compose-confi\">Docker Compose Configuration</h2>\n<p id=\"bkmrk-the-docker-compose.y\">The <code>docker-compose.yml</code> file orchestrates the deployment and provides configuration options:</p>\n<pre id=\"bkmrk-version%3A-%273.8%27-servi\"><code class=\"language-yaml\">version: '3.8'\n\nservices:\n  webhook-receiver:\n    build: .\n    ports:\n      - \"8003:8003\"\n    # Load environment variables from .env file\n    env_file:\n      - .env\n    environment:\n      # BookStack API settings\n      - BS_URL=${BS_URL:-https://knowledge.oculair.ca}\n      - BS_TOKEN_ID=${BS_TOKEN_ID}\n      - BS_TOKEN_SECRET=${BS_TOKEN_SECRET}\n      # Neo4j connection parameters\n      - NEO4J_URI=${NEO4J_URI:-bolt://192.168.50.90:7687}\n      - NEO4J_USER=${NEO4J_USER:-neo4j}\n      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-demodemo}\n      # Graphiti settings\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - GRAPHITI_ENDPOINT=${GRAPHITI_ENDPOINT:-http://192.168.50.90:8002/api}\n      # Enable/disable initial sync\n      - ENABLE_SYNC=${ENABLE_SYNC:-true}\n      # Port setting\n      - PORT=8003\n    command: &gt;\n      sh -c '\n        # Use double $$ to escape $ for docker-compose variable interpolation\n        # Check ENABLE_SYNC (loaded from .env via env_file), default to \"true\" if not set or empty\n        if [ \"$${ENABLE_SYNC:-true}\" = \"true\" ]; then\n          echo \"ENABLE_SYNC=true. Running initial sync via sync_bookstack_data.py...\"\n          python sync_bookstack_data.py &amp;&amp; echo \"Initial sync finished. Starting server...\" &amp;&amp; uvicorn webhook_receiver:app --host 0.0.0.0 --port 8003\n        else\n          echo \"ENABLE_SYNC=false. Skipping initial sync script and starting server...\"\n          # Directly start the server, relying on webhook_receiver.py to handle sync logic if needed\n          uvicorn webhook_receiver:app --host 0.0.0.0 --port 8003\n        fi\n      '\n</code></pre>\n<p id=\"bkmrk-this-configuration%3A\">This configuration:</p>\n<ol id=\"bkmrk-builds-the-container\">\n<li>Builds the container using the Dockerfile in the current directory</li>\n<li>Maps port 8003 from the container to the host</li>\n<li>Loads environment variables from the <code>.env</code> file</li>\n<li>Provides default values for essential configuration settings</li>\n<li>Includes a startup script that conditionally runs the initial data synchronization</li>\n</ol>\n<h2 id=\"bkmrk-environment-variable\">Environment Variables in Docker</h2>\n<p id=\"bkmrk-the-docker-compose-f\">The Docker Compose file supports environment variable substitution with default values:</p>\n<ul id=\"bkmrk-%24%7Bvariable_name%3A-def\">\n<li><code>${VARIABLE_NAME:-default_value}</code> syntax provides a default if the variable is not set</li>\n<li>Variables are loaded from the <code>.env</code> file and can be overridden by environment variables</li>\n</ul>\n<h2 id=\"bkmrk-deploying-with-docke\">Deploying with Docker</h2>\n<h3 id=\"bkmrk-prerequisites\">Prerequisites</h3>\n<ul id=\"bkmrk-docker-and-docker-co\">\n<li>Docker and Docker Compose installed on your system</li>\n<li>A properly configured <code>.env</code> file (see the Installation and Configuration chapter)</li>\n</ul>\n<h3 id=\"bkmrk-deployment-steps\">Deployment Steps</h3>\n<ol id=\"bkmrk-build-and-start-the-\">\n<li>\n<p><strong>Build and start the container</strong>:</p>\n<pre><code class=\"language-bash\">docker-compose up -d\n</code></pre>\n<p>This command builds the container image and starts it in detached mode.</p>\n</li>\n<li>\n<p><strong>View logs</strong>:</p>\n<pre><code class=\"language-bash\">docker-compose logs -f\n</code></pre>\n<p>This command shows the logs from the container, which is useful for monitoring the initial sync process and troubleshooting.</p>\n</li>\n<li>\n<p><strong>Stop the container</strong>:</p>\n<pre><code class=\"language-bash\">docker-compose down\n</code></pre>\n<p>This command stops and removes the container.</p>\n</li>\n</ol>\n<h2 id=\"bkmrk-initial-sync-control\">Initial Sync Control</h2>\n<p id=\"bkmrk-the-docker-setup-inc\">The Docker setup includes a mechanism to control whether the initial data synchronization runs when the container starts:</p>\n<ul id=\"bkmrk-set-enable_sync%3Dtrue\">\n<li>Set <code>ENABLE_SYNC=true</code> in your <code>.env</code> file to run the initial sync on startup</li>\n<li>Set <code>ENABLE_SYNC=false</code> to skip the initial sync</li>\n</ul>\n<p id=\"bkmrk-this-is-particularly\">This is particularly useful for:</p>\n<ul id=\"bkmrk-first-time-deploymen\">\n<li>First-time deployments (enable sync)</li>\n<li>Restarting after a crash (disable sync to avoid duplicate data)</li>\n<li>Testing webhook functionality (disable sync for faster startup)</li>\n</ul>\n<h2 id=\"bkmrk-container-health-che\">Container Health Checks</h2>\n<p id=\"bkmrk-the-webhook-receiver\">The webhook receiver includes a health check endpoint at the root URL (<code>/</code>). You can use this to monitor the container's health:</p>\n<pre id=\"bkmrk-curl-http%3A%2F%2Flocalhos\"><code class=\"language-bash\">curl http://localhost:8003/\n</code></pre>\n<p id=\"bkmrk-a-successful-respons\">A successful response indicates that the webhook receiver is running correctly.</p>\n<h2 id=\"bkmrk-production-considera\">Production Considerations</h2>\n<p id=\"bkmrk-for-production-deplo\">For production deployments, consider the following:</p>\n<ol id=\"bkmrk-persistent-storage%3A-\">\n<li><strong>Persistent Storage</strong>: Mount a volume for the cache file to persist across container restarts</li>\n<li><strong>Network Configuration</strong>: Use a reverse proxy (like Nginx or Traefik) for SSL termination</li>\n<li><strong>Resource Limits</strong>: Set memory and CPU limits in the Docker Compose file</li>\n<li><strong>Logging</strong>: Configure Docker's logging driver for centralized log management</li>\n<li><strong>Monitoring</strong>: Set up container monitoring with tools like Prometheus and Grafana</li>\n</ol>\n<h2 id=\"bkmrk-example-production-d\">Example Production Docker Compose</h2>\n<pre id=\"bkmrk-version%3A-%273.8%27-servi-1\"><code class=\"language-yaml\">version: '3.8'\n\nservices:\n  webhook-receiver:\n    build: .\n    restart: always\n    ports:\n      - \"8003:8003\"\n    env_file:\n      - .env\n    volumes:\n      - ./data:/app/data\n    environment:\n      - BS_URL=${BS_URL}\n      - BS_TOKEN_ID=${BS_TOKEN_ID}\n      - BS_TOKEN_SECRET=${BS_TOKEN_SECRET}\n      - NEO4J_URI=${NEO4J_URI}\n      - NEO4J_USER=${NEO4J_USER}\n      - NEO4J_PASSWORD=${NEO4J_PASSWORD}\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - GRAPHITI_ENDPOINT=${GRAPHITI_ENDPOINT}\n      - ENABLE_SYNC=${ENABLE_SYNC:-false}\n      - PORT=8003\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n    deploy:\n      resources:\n        limits:\n          cpus: '1'\n          memory: 1G\n</code></pre>\n<p id=\"bkmrk-this-production-read\">This production-ready configuration adds:</p>\n<ul id=\"bkmrk-automatic-container-\">\n<li>Automatic container restart</li>\n<li>Persistent volume for data</li>\n<li>Log rotation</li>\n<li>Resource limits</li>\n<li>Disables initial sync by default (assuming it's a restart)</li>\n</ul>\n",
  "tags": [],
  "book": "BookStack-Graphiti Integration",
  "chapter": ""
}