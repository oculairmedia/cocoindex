{
  "id": 108,
  "title": "Detailed Implementation Plan: PostgreSQL Logical Decoding for Letta Chat Capture",
  "slug": "detailed-implementation-plan-postgresql-logical-decoding-for-letta-chat-capture",
  "url": "https://knowledge.oculair.ca/books/unknown/page/detailed-implementation-plan-postgresql-logical-decoding-for-letta-chat-capture",
  "updated_at": "2025-05-06T05:37:42.000000Z",
  "body_html": "<h2 id=\"bkmrk-1.-postgresql-config\">1. PostgreSQL Configuration</h2>\r\n<h3 id=\"bkmrk-1.1-enable-logical-r\">1.1 Enable Logical Replication</h3>\r\n<p id=\"bkmrk-edit-the-postgresql-\">Edit the PostgreSQL configuration file (postgresql.conf):</p>\r\n<pre id=\"bkmrk-wal_level-%3D-logical-\"><code>wal_level = logical\r\nmax_wal_senders = 10\r\nmax_replication_slots = 10</code></pre>\r\n<h3 id=\"bkmrk-1.2-create-a-dedicat\">1.2 Create a Dedicated Replication User</h3>\r\n<pre id=\"bkmrk-create-role-letta_re\"><code class=\"language-sql\">CREATE ROLE letta_replication WITH REPLICATION LOGIN PASSWORD 'secure_password';\r\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO letta_replication;</code></pre>\r\n<h3 id=\"bkmrk-1.3-configure-pg_hba\">1.3 Configure pg_hba.conf for Replication</h3>\r\n<p id=\"bkmrk-add-an-entry-in-pg_h\">Add an entry in pg_hba.conf:</p>\r\n<pre id=\"bkmrk-host-replication-let\"><code>host    replication     letta_replication     192.168.1.0/24        md5</code></pre>\r\n<h3 id=\"bkmrk-1.4-install-wal2json\">1.4 Install WAL2JSON Plugin</h3>\r\n<pre id=\"bkmrk-apt-get-install-post\"><code class=\"language-bash\">apt-get install postgresql-12-wal2json  # Adjust version as needed</code></pre>\r\n<h3 id=\"bkmrk-1.5-create-a-replica\">1.5 Create a Replication Slot</h3>\r\n<pre id=\"bkmrk-select-pg_create_log\"><code class=\"language-sql\">SELECT pg_create_logical_replication_slot('letta_chat_capture', 'wal2json');</code></pre>\r\n<h2 id=\"bkmrk-2.-change-data-captu\">2. Change Data Capture (CDC) Service</h2>\r\n<h3 id=\"bkmrk-2.1-service-architec\">2.1 Service Architecture</h3>\r\n<ul id=\"bkmrk-create-a-standalone-\">\r\n<li>Create a standalone microservice that:\r\n<ul>\r\n<li>Connects to the PostgreSQL replication slot</li>\r\n<li>Processes change events</li>\r\n<li>Transforms data to Graphiti format</li>\r\n<li>Sends data to Graphiti API</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h3 id=\"bkmrk-2.2-sample-implement\">2.2 Sample Implementation (Python)</h3>\r\n<pre id=\"bkmrk-import-json-import-p\"><code class=\"language-python\">import json\r\nimport psycopg2\r\nimport requests\r\nimport time\r\nimport logging\r\nfrom datetime import datetime\r\n\r\n# Configure logging\r\nlogging.basicConfig(\r\n    level=logging.INFO,\r\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\r\n    handlers=[logging.FileHandler(\"letta_cdc.log\"), logging.StreamHandler()]\r\n)\r\nlogger = logging.getLogger(\"letta-cdc\")\r\n\r\n# Configuration\r\nPG_CONFIG = {\r\n    \"host\": \"letta-postgres-host\",\r\n    \"port\": 5432,\r\n    \"database\": \"letta_db\",\r\n    \"user\": \"letta_replication\",\r\n    \"password\": \"secure_password\"\r\n}\r\nGRAPHITI_API_URL = \"https://graphiti-api/episodes\"\r\nGRAPHITI_API_KEY = \"your_api_key\"\r\nSLOT_NAME = \"letta_chat_capture\"\r\nTABLES_TO_MONITOR = [\"messages\", \"agent_interactions\"]  # Adjust based on Letta's schema\r\n\r\ndef connect_to_replication_slot():\r\n    \"\"\"Establish connection to the replication slot\"\"\"\r\n    try:\r\n        conn = psycopg2.connect(\r\n            **PG_CONFIG,\r\n            connection_factory=psycopg2.extras.LogicalReplicationConnection\r\n        )\r\n        cur = conn.cursor()\r\n        return conn, cur\r\n    except Exception as e:\r\n        logger.error(f\"Failed to connect to replication slot: {e}\")\r\n        raise\r\n\r\ndef process_change(change):\r\n    \"\"\"Process a single change event from WAL\"\"\"\r\n    try:\r\n        if change.get(\"kind\") not in [\"insert\", \"update\"]:\r\n            return None  # Skip deletes or other operations\r\n            \r\n        table = change.get(\"table\")\r\n        if table not in TABLES_TO_MONITOR:\r\n            return None  # Not a table we're interested in\r\n            \r\n        # Extract the new row data\r\n        data = change.get(\"columnvalues\")\r\n        columns = change.get(\"columnnames\")\r\n        row_data = dict(zip(columns, data))\r\n        \r\n        # Transform to Graphiti format\r\n        graphiti_payload = transform_to_graphiti(table, row_data)\r\n        return graphiti_payload\r\n    except Exception as e:\r\n        logger.error(f\"Error processing change: {e}\")\r\n        return None\r\n\r\ndef transform_to_graphiti(table, row_data):\r\n    \"\"\"Transform a row to Graphiti episode format\"\"\"\r\n    # Customize this based on your Letta schema and Graphiti requirements\r\n    if table == \"messages\":\r\n        return {\r\n            \"name\": f\"Chat Message {row_data.get('id')}\",\r\n            \"episode_body\": json.dumps({\r\n                \"message_id\": row_data.get(\"id\"),\r\n                \"agent_id\": row_data.get(\"agent_id\"),\r\n                \"user_id\": row_data.get(\"user_id\"),\r\n                \"content\": row_data.get(\"content\"),\r\n                \"timestamp\": row_data.get(\"created_at\"),\r\n                \"message_type\": row_data.get(\"type\")\r\n            }),\r\n            \"source\": \"json\",\r\n            \"source_description\": f\"Letta message captured via CDC at {datetime.now().isoformat()}\"\r\n        }\r\n    # Add more transformations for other tables\r\n\r\ndef send_to_graphiti(payload):\r\n    \"\"\"Send transformed data to Graphiti API\"\"\"\r\n    try:\r\n        headers = {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": f\"Bearer {GRAPHITI_API_KEY}\"\r\n        }\r\n        response = requests.post(\r\n            GRAPHITI_API_URL,\r\n            headers=headers,\r\n            json=payload\r\n        )\r\n        if response.status_code != 200:\r\n            logger.error(f\"Failed to send to Graphiti: {response.text}\")\r\n            return False\r\n        return True\r\n    except Exception as e:\r\n        logger.error(f\"Error sending to Graphiti: {e}\")\r\n        return False\r\n\r\ndef main_loop():\r\n    \"\"\"Main CDC processing loop\"\"\"\r\n    conn, cur = connect_to_replication_slot()\r\n    \r\n    # Start consuming from the slot\r\n    cur.start_replication(slot_name=SLOT_NAME, decode=True)\r\n    \r\n    logger.info(f\"Started consuming from replication slot {SLOT_NAME}\")\r\n    \r\n    try:\r\n        def consume(msg):\r\n            # Process the message payload\r\n            payload = json.loads(msg.payload)\r\n            for change in payload.get(\"change\", []):\r\n                graphiti_payload = process_change(change)\r\n                if graphiti_payload:\r\n                    success = send_to_graphiti(graphiti_payload)\r\n                    if success:\r\n                        logger.info(f\"Successfully processed and sent change for {change.get('table')} id={change.get('columnvalues')[0]}\")\r\n            \r\n            # Acknowledge the message\r\n            msg.cursor.send_feedback(flush_lsn=msg.data_start)\r\n            \r\n        # Start consuming messages\r\n        cur.consume_stream(consume)\r\n    except KeyboardInterrupt:\r\n        logger.info(\"Stopping CDC service...\")\r\n    except Exception as e:\r\n        logger.error(f\"Error in main loop: {e}\")\r\n    finally:\r\n        conn.close()\r\n\r\nif __name__ == \"__main__\":\r\n    while True:\r\n        try:\r\n            main_loop()\r\n        except Exception as e:\r\n            logger.error(f\"Main loop failed, restarting in 10 seconds: {e}\")\r\n            time.sleep(10)\r\n</code></pre>\r\n<h2 id=\"bkmrk-3.-deployment-%26-moni\">3. Deployment &amp; Monitoring</h2>\r\n<h3 id=\"bkmrk-3.1-containerization\">3.1 Containerization</h3>\r\n<p id=\"bkmrk-create-a-dockerfile-\">Create a Dockerfile for the CDC service:</p>\r\n<pre id=\"bkmrk-from-python%3A3.9-slim\"><code class=\"language-dockerfile\">FROM python:3.9-slim\r\n\r\nWORKDIR /app\r\n\r\nCOPY requirements.txt .\r\nRUN pip install --no-cache-dir -r requirements.txt\r\n\r\nCOPY . .\r\n\r\nCMD [\"python\", \"cdc_service.py\"]</code></pre>\r\n<h3 id=\"bkmrk-3.2-requirements.txt\">3.2 Requirements.txt</h3>\r\n<pre id=\"bkmrk-psycopg2-binary%3D%3D2.9\"><code>psycopg2-binary==2.9.3\r\nrequests==2.27.1\r\npython-dotenv==0.20.0</code></pre>\r\n<h3 id=\"bkmrk-3.3-kubernetes-deplo\">3.3 Kubernetes Deployment (Optional)</h3>\r\n<pre id=\"bkmrk-apiversion%3A-apps%2Fv1-\"><code class=\"language-yaml\">apiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: letta-cdc-service\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      app: letta-cdc\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: letta-cdc\r\n    spec:\r\n      containers:\r\n      - name: cdc-service\r\n        image: letta-cdc:latest\r\n        resources:\r\n          limits:\r\n            memory: \"256Mi\"\r\n            cpu: \"500m\"\r\n        env:\r\n        - name: PG_HOST\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: letta-db-secrets\r\n              key: host\r\n        - name: PG_USER\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: letta-db-secrets\r\n              key: user\r\n        - name: PG_PASSWORD\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: letta-db-secrets\r\n              key: password\r\n        - name: GRAPHITI_API_KEY\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: graphiti-secrets\r\n              key: api_key</code></pre>\r\n<h3 id=\"bkmrk-3.4-monitoring-%26-ale\">3.4 Monitoring &amp; Alerting</h3>\r\n<ul id=\"bkmrk-set-up-prometheus-me\">\r\n<li>Set up Prometheus metrics for:\r\n<ul>\r\n<li>Events processed</li>\r\n<li>Successful/failed Graphiti submissions</li>\r\n<li>Replication lag</li>\r\n</ul>\r\n</li>\r\n<li>Configure alerts for:\r\n<ul>\r\n<li>Service downtime</li>\r\n<li>High error rates</li>\r\n<li>Replication slot overflow</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h2 id=\"bkmrk-4.-testing-%26-validat\">4. Testing &amp; Validation</h2>\r\n<h3 id=\"bkmrk-4.1-local-testing\">4.1 Local Testing</h3>\r\n<ol id=\"bkmrk-set-up-a-local-postg\">\r\n<li>Set up a local PostgreSQL instance with test data</li>\r\n<li>Configure replication as described</li>\r\n<li>Run the CDC service locally</li>\r\n<li>Verify data appears in Graphiti</li>\r\n</ol>\r\n<h3 id=\"bkmrk-4.2-integration-test\">4.2 Integration Testing</h3>\r\n<ol id=\"bkmrk-connect-to-a-staging\">\r\n<li>Connect to a staging Letta database</li>\r\n<li>Process a subset of real data</li>\r\n<li>Validate data integrity in Graphiti</li>\r\n</ol>\r\n<h3 id=\"bkmrk-4.3-production-valid\">4.3 Production Validation</h3>\r\n<ol id=\"bkmrk-deploy-with-monitori\">\r\n<li>Deploy with monitoring</li>\r\n<li>Start with a small subset of tables</li>\r\n<li>Gradually expand to all chat-related tables</li>\r\n<li>Implement checkpoints to verify no data loss</li>\r\n</ol>\r\n<h2 id=\"bkmrk-5.-maintenance-%26-ope\">5. Maintenance &amp; Operations</h2>\r\n<h3 id=\"bkmrk-5.1-backup-%26-recover\">5.1 Backup &amp; Recovery</h3>\r\n<ul id=\"bkmrk-regularly-back-up-re\">\r\n<li>Regularly back up replication slot position</li>\r\n<li>Document recovery procedures</li>\r\n</ul>\r\n<h3 id=\"bkmrk-5.2-schema-evolution\">5.2 Schema Evolution</h3>\r\n<ul id=\"bkmrk-monitor-for-letta-sc\">\r\n<li>Monitor for Letta schema changes</li>\r\n<li>Update transformations as needed</li>\r\n</ul>\r\n<h3 id=\"bkmrk-5.3-performance-tuni\">5.3 Performance Tuning</h3>\r\n<ul id=\"bkmrk-monitor-postgresql-r\">\r\n<li>Monitor PostgreSQL replication performance</li>\r\n<li>Optimize batch sizes and processing intervals</li>\r\n<li>Scale horizontally if needed</li>\r\n</ul>",
  "tags": [],
  "book": "Unknown",
  "chapter": ""
}