{
  "id": 128,
  "title": "Overall Pipeline Overview",
  "slug": "overall-pipeline-overview",
  "url": "https://knowledge.oculair.ca/page/128",
  "updated_at": "2025-05-29T02:32:38.000000Z",
  "body_html": "<p id=\"bkmrk-this-document-outlin\">This document outlines the refined RAG (Retrieval Augmented Generation) pipeline architecture designed for integrating diverse content into Emmanuel Umukoro's multi-agent system. The pipeline aims to provide contextual information to Letta agents, enhancing their capabilities through a unified and scalable knowledge system.</p>\n<p id=\"bkmrk-key-components-and-f\"><strong>Key Components and Flow:</strong></p>\n<ol id=\"bkmrk-content-acquisition-\">\n<li><strong>Content Acquisition (Readarr):</strong> The process begins with Readarr, responsible for sourcing and collecting digital documents and books.</li>\n<li><strong>Content Management (Audiobookshelf):</strong> Acquired content is managed and organized using Audiobookshelf, which handles ebooks and audiobooks, including metadata and format conversions.</li>\n<li><strong>Text Extraction (DocLing):</strong> DocLing processes the content from Audiobookshelf, extracting raw textual data suitable for further processing.</li>\n<li><strong>RAG Orchestration (Haystack):</strong> Haystack serves as the central orchestration layer. It takes the extracted data, performs chunking (breaking down large texts into smaller, manageable pieces), generates embeddings (numerical representations of text), and manages the overall RAG pipeline logic.</li>\n<li><strong>Vector Store (Neo4j):</strong> The generated document embeddings are stored in Neo4j. This choice is strategic, leveraging Neo4j's graph database capabilities to potentially combine and cross-link RAG data with existing information in the Graphiti knowledge graph, which also uses Neo4j as its backbone.</li>\n<li><strong>Agent Integration (Letta via Hayhooks):</strong> The Haystack-orchestrated RAG system is exposed through an OpenAI-compatible Hayhooks endpoint. This endpoint allows Letta agents to dynamically access and utilize contextual information from the pipeline, or trigger distinct tool calls for specific data retrieval.</li>\n</ol>\n<p id=\"bkmrk-this-architecture-em\">This architecture emphasizes a unified knowledge graph, enhanced contextualization through cross-linking, sophisticated querying capabilities, and streamlined data management, leading to a robust and scalable solution for feeding contextual information to agents.</p>\n",
  "tags": [],
  "book": null,
  "chapter": null
}