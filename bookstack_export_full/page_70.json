{
  "id": 70,
  "title": "Tool Creation Message Format",
  "slug": "tool-creation-message-format",
  "url": "https://knowledge.oculair.ca/books/unknown/page/tool-creation-message-format",
  "updated_at": "2025-02-27T03:33:45.000000Z",
  "body_html": "<p id=\"bkmrk-request-%28opson-to-op\"><strong>Request (Opson to OpenHands):</strong></p><pre id=\"bkmrk-%7B-%22action%22%3A-%22create_\"><code>{\n  \"action\": \"create_tool\",\n  \"tool_name\": \"tool_name\",\n  \"description\": \"A detailed description of the tool's purpose and functionality.  Be EXPLICIT and include all requirements.\",\n  \"parameters\": [\n    {\n      \"name\": \"param1\",\n      \"type\": \"string\",\n      \"description\": \"Description of param1\"\n    },\n    {\n      \"name\": \"param2\",\n      \"type\": \"integer\",\n      \"description\": \"Description of param2\"\n    }\n  ],\n \"validation_steps\": [\n    \"lint\",\n    \"security_check\",\n    \"unit_test\"\n ],\n  \"examples\": [\n     {\n        \"input\": \"...\",\n        \"expected_output\": \"...\"\n     }\n  ],\n  \"documentation\": \"Relevant API documentation or links (if applicable)\"\n}\n</code></pre><p id=\"bkmrk-response-%28openhands-\"><strong>Response (OpenHands to Opson):</strong></p><pre id=\"bkmrk-%7B-%22status%22%3A-%22success\"><code>{\n  \"status\": \"success\" | \"failure\",\n  \"tool_code\": \"Python code of the generated tool\",\n  \"validation_results\": {\n    \"lint\": {\n      \"status\": \"passed\" | \"failed\",\n      \"messages\": []  // Array of strings describing linting issues.\n    },\n    \"security_check\": {\n      \"status\": \"passed\" | \"failed\",\n      \"messages\": []  // Array of strings describing security issues.\n    },\n    \"unit_test\": {\n      \"status\": \"passed\" | \"failed\",\n      \"messages\": []  // Array of strings describing unit test failures.\n    }\n  },\n  \"error_message\": \"Error message if the tool creation failed\" (optional),\n \"openhands_chat_link\": \"Link to the OpenHands conversation\" (optional, provided on failure)\n}\n</code></pre><p id=\"bkmrk-data-format%3A-json\"><strong>Data Format:</strong> JSON</p><p id=\"bkmrk-additional-requireme\"><strong>Additional Requirements for Opson's Instructions:</strong></p><ul id=\"bkmrk-explicit-requirement\"><li><strong>Explicit Requirements:</strong> Opson must clearly state the tool's purpose, functionality, input parameters, and expected output.</li><li><strong>Full Testing: </strong> Opson must explicitly request comprehensive testing, including unit tests, integration tests (if applicable), and security checks.</li><li><strong>Examples:</strong> Opson should provide examples of how the tool should be used and the expected output for different inputs.</li><li><strong>Relevant Documentation:</strong> Opson should include any available documentation for the API endpoint or functionality the tool interacts with.</li></ul><p id=\"bkmrk-error-handling%3A\"><strong>Error Handling:</strong></p><ol id=\"bkmrk-openhands-reports-an\"><li>OpenHands reports any errors during tool creation or validation to Opson via the `status` and `error_message` fields in the response.</li><li>Opson attempts to address the error and find a solution (implementation details TBD).</li><li>If there are more than two consecutive failures, Opson notifies either the human or Pansil, providing the OpenHands chat link (included in the response as `openhands_chat_link`) for troubleshooting.</li></ol><p id=\"bkmrk-validation-steps-%28pe\"><strong>Validation Steps (Performed by Opson):</strong></p><ol id=\"bkmrk-static-analysis-%28lin\"><li><strong>Static Analysis (Linting):</strong><ul><li>Tools: <code>pylint</code>, <code>flake8</code></li><li>Purpose: Check for code style issues, potential errors, and adherence to best practices.</li></ul></li><li><strong>Security Linting:</strong><ul><li>Tool: <code>bandit</code></li><li>Purpose: Identify potential security vulnerabilities in the Python code.</li></ul></li><li><strong>Dynamic Testing (Letta Endpoint):</strong><ul><li>Endpoint: <code>run-tool-from-source</code></li><li>Purpose: Execute the tool with test inputs and verify the output and logs. Set resource limits (CPU, memory).</li></ul></li></ol><p id=\"bkmrk-opson-will-use-separ\">Opson will use separate tools for each validation step (linting, security linting, and Letta endpoint testing) for modularity and flexibility.</p>",
  "tags": [],
  "book": "Unknown",
  "chapter": ""
}